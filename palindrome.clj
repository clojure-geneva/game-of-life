(def msg "Of the new crop of languages appearing on the Java Virtual Machine")
(reverse msg)
(rest (reverse msg))
(first (msg))
(= (first (reverse msg)) (first msg))
(for [i (range (count msg))] i)
(for [i (range (count msg))] (if (= (first (reverse msg))) ((vec msg) i) i))
(for [i (range (count msg))] (if (= (first (reverse msg)) ((vec msg) i)) i))
(defn match-first-char? [text reversed]
            (= (first text) (first reversed)))
(match-first-char? "allo" "bi")
(for [i (range (count msg))] (if (match-first-char? msg (str (vec (reverse msg)) i)) i))
(for [i (range (count msg))] (if (match-first-char? msg (str (vec (reverse msg) i))) i))
(for [i (range (count msg))] (if (match-first-char? msg (str ((vec (reverse msg)) i) )) i))
(for [i (range (count msg))] (if (match-first-char? (reverse msg) (str ((vec msg) i) )) i))
(defn palindrome [text reversed] (for [i (range 0 (- (max (count text) (count reversed)) 1)) when: (= ((vec text) i) ((vec reversed) i))] i))
(defn palindrome [text reversed] (for [i (range 0 (- (max (count text) (count reversed)) 1)) :when (= ((vec text) i) ((vec reversed) i))] i))
(palindrome "aaa" "aaa")
(defn palindrome [text reversed] (for [i (range 0 (- (max (count text) (count reversed)) 0)) :when (= ((vec text) i) ((vec reversed) i))] i))
(palindrome "aaa" "aaa")
(defn palindrome [text reversed] (for [i (range 0 (max (count text) (count reversed))) :when (= ((vec text) i) ((vec reversed) i))] i))
(palindrome "aaa" "aaa")
(defn palindrome [text reversed] (for [i (range 0 (max (count text) (count reversed))) :when (= ((vec text) i) ((vec reversed) i))] (str ((vec msg) i))))
(defn palindrome [text reversed] (for [i (range 0 (max (count text) (count reversed))) :when (= ((vec text) i) ((vec reversed) i))] (str ((vec msg) i))))
(palindrome "aaa" "aaa")
(defn palindrome [text reversed] (for [i (range 0 (max (count text) (count reversed))) :when (= ((vec text) i) ((vec reversed) i))] (str ((vec text) i))))
(palindrome "aaa" "aaa")
(for [i (range (count msg))] (if (match-first-char? (reverse msg) (str ((vec msg) i) )) i))
(defn scan-first-occurence [text reversed] (for [i (range (count text))] (if (match-first-char? reversed (str ((vec text) i) )) i)))
(scan-first-occurence msg (reverse msg))
(palindrome (nth msg 5) (reverse msg))
(palindrome (str (nth msg 5)) (reverse msg))
(nth msg 5)
(palindrome (subs msg 5) (reverse msg))
(palindrome (subs msg 5) (reverse msg))
(subs msg 5)
(defn palindrome [text reversed] (for [i (range 0 (min (count text) (count reversed))) :when (= ((vec text) i) ((vec reversed) i))] (str ((vec text) i))))
(palindrome "acccc" "acccd")
(palindrome (subs msg 5) (reverse msg))
(reverse msg)
(palindrome (subs msg 5) (str (reverse msg)))
(str (reverse msg))
(map (str (reverse msg)))
(map str (reverse msg))
(palindrome (subs msg 5) (map str (reverse msg)))
(palindrome (subs msg 5) (str (map str (reverse msg))))
(map str (reverse msg)))
(first (str (map str (reverse msg))))
